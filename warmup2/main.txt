	
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define START_CODON "AUG"
#define END_CODON_1 "UAA"
#define END_CODON_2 "UAG"
#define END_CODON_3 "UGA"


int numCodons;
#define MAXROWS 100
#define MAXCOLS 100
char grid[MAXROWS][MAXCOLS];

int isStartCodon(char * str) {
    if (strcmp(str, START_CODON) == 0) {
            return 1;
    }
    return 0;
}

int isEndCodon(char * str) {
    if (strcmp(str, END_CODON_1) == 0) {
            return 1;
    }
    if (strcmp(str, END_CODON_2) == 0) {
            return 1;
    }
    if (strcmp(str, END_CODON_3) == 0) {
            return 1;
    }
    return 0;
}

int isCodon(char ** codons, char * str) {
    for (int i = 0; i < numCodons; i++) {
        if (strcmp(str,codons[i]) == 0) {
            return 1;
        }
	}
    return 0;
}

char ** makeCodons() {
    freopen("codons.txt", "r", stdin);

	scanf("%d", &numCodons);
    numCodons -= 4;
    char ** codons; 
    codons = malloc(sizeof(char**) * numCodons + 1);

    for (int i = 0; i < numCodons;) {
        char candidate[4];
        scanf("%s", candidate);
        if (isEndCodon(candidate) == 0 && isStartCodon(candidate) == 0) {
            codons[i] = malloc(4*sizeof(char));
            strcpy(codons[i], candidate);
            i++;
        }
	}

    return codons;
}

void freeCodons(char ** codons) {
    for (int i = 0; i <= numCodons; i++) {
		free(codons[i]);
	}

    free(codons);
}

int exploreCol(char grid[MAXROWS][MAXCOLS], char ** codons, int row, int col, int max_rows) {
    int length = 1;
    for (int r = row; r < max_rows; r += 3) {
        char candidate[4]; 
        candidate[0] =  grid[r-2][col];
        candidate[1] = grid[r-1][col];
        candidate[2] = grid[r][col];
        candidate[3] = '\0';


        // if the next element is a codon continue
        if (isCodon(codons, candidate)) {
            length++;
            continue;
        }
        // if the next element is an end codon, add one and return
        else if (isEndCodon(candidate)) {
            return length + 1;
        }
        // if the next element is not a codon and we have only see AUG, return 0
        else if (length == 1) {
            return 0;
        } 

    }
    return 0;
}

int exploreColBackwards(char grid[MAXROWS][MAXCOLS], char ** codons, int row, int col, int max_cols) {
    int length = 1;
    for (int r = row; r >= 0; r -= 3) {
        char candidate[4]; 
        candidate[0] =  grid[r+2][col];
        candidate[1] = grid[r+1][col];
        candidate[2] = grid[r][col];
        candidate[3] = '\0';

        // if the next element is a codon continue
        if (isCodon(codons, candidate)) {
            length++;
            continue;
        }
        // if the next element is an end codon, add one and return
        else if (isEndCodon(candidate)) {
            return length + 1;
        }
        // if the next element is not a codon and we have only see AUG, return 0
        else if (length == 1) {
            return 0;
        } 

    }

    return 0;
}



int exploreRow(char grid[MAXROWS][MAXCOLS], char ** codons, int row, int col, int max_cols) {
    int length = 1;
    for (int c = col; c < max_cols; c += 3) {
        char candidate[4]; 
        candidate[0] =  grid[row][c-2];
        candidate[1] = grid[row][c-1];
        candidate[2] = grid[row][c];
        candidate[3] = '\0';

        // if the next element is a codon continue
        if (isCodon(codons, candidate)) {
            length++;
            continue;
        }
        // if the next element is an end codon, add one and return
        else if (isEndCodon(candidate)) {
            return length + 1;
        }
        // if the next element is not a codon and we have only see AUG, return 0
        else if (length == 1) {
            return 0;
        } 
    }
    return 0;
}

int exploreRowBackwards(char grid[MAXROWS][MAXCOLS], char ** codons, int row, int col, int max_cols) {
    int length = 1;
    for (int c = col; c >= 0; c -= 3) {
        char candidate[4]; 
        candidate[0] =  grid[row][c+2];
        candidate[1] = grid[row][c+1];
        candidate[2] = grid[row][c];
        candidate[3] = '\0';

        // if the next element is a codon continue
        if (isCodon(codons, candidate)) {
            length++;
            continue;
        }
        // if the next element is an end codon, add one and return
        else if (isEndCodon(candidate)) {
            return length + 1;
        }
        // if the next element is not a codon and we have only see AUG, return 0
        else if (length == 1) {
            return 0;
        } 
    }

    return 0;
}


int main() {
    char ** codons = makeCodons();

    freopen("input_problem_3.txt", "r", stdin);
	int rows, cols, numTestCases;
	scanf("%d", &numTestCases);

    // printf("%d \n", isCodon(codons, "UGA"));
    for (int i = 0; i < numTestCases; i++) {
		scanf("%d", &rows);
		scanf("%d", &cols);
		
        // build grid
        for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				scanf(" %c", &grid[i][j]); // Note: there should be a space before %c to skip spaces and newlines
			}
		}

        // sliding window of length of codon
        int max_length = 0;

            // check row forward
            for (int row = 0; row < rows; row++) {
                for (int col = 2; col < cols; col++) {
                    char candidate[4]; 
                    candidate[0] =  grid[row][col-2];
                    candidate[1] = grid[row][col-1];
                    candidate[2] = grid[row][col];
                    candidate[3] = '\0';
                    
                    if (isStartCodon(candidate)) {
                        int length = exploreRow(grid, codons, row, col + 3, cols);
                        if (length > max_length) {
                            max_length = length;
                        }
                    }
                }
            }

            //check row backward
            for (int row = rows - 1; row >= 0; row--) {
                for (int col = cols - 3; col >=0; col--) {
                    char candidate[4]; 
                    candidate[0] =  grid[row][col+2];
                    candidate[1] = grid[row][col+1];
                    candidate[2] = grid[row][col];
                    candidate[3] = '\0';
                    if (isStartCodon(candidate)) {
                        int length = exploreRowBackwards(grid, codons, row, col - 3, cols);
                        if (length > max_length) {
                            max_length = length;
                        }
                    }
                }
            }

            //check col downward
            for (int col = 0; col < cols; col++) {
                for (int row = 2; row < rows; row++) {
                    char candidate[4]; 
                    candidate[0] =  grid[row -2][col];
                    candidate[1] = grid[row - 1][col];
                    candidate[2] = grid[row][col];
                    candidate[3] = '\0';
                    if (isStartCodon(candidate)) {
                        int length = exploreCol(grid, codons, row + 3, col, rows);
                        if (length > max_length) {
                            max_length = length;
                        }
                    }
                }
            }

            //check col upward
            for (int col = cols - 1; col >= 0; col--) {
                for (int row = rows - 3; row >=0; row--) {
                    char candidate[4]; 
                    candidate[0] =  grid[row+2][col];
                    candidate[1] = grid[row+1][col];
                    candidate[2] = grid[row][col];
                    candidate[3] = '\0';

                    if (isStartCodon(candidate)) {
                        int length = exploreColBackwards(grid, codons, row - 3, col, rows);
                        if (length > max_length) {
                            max_length = length;
                        }
                    }
                }
            }

            printf("puzzle %d = %d \n", i + 1, max_length);

    }
    
    
    freeCodons(codons);
    
}