#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct node {
    struct node *prev;
    struct node *next;
    int val;
};

struct LL {
    struct node *head;
    struct node *tail;
    int capacity;
    int length;
};

struct LL *newLL(int capacity) {
    struct LL *ll = (struct LL*) malloc(sizeof(struct LL));
    ll->head = (struct node*) malloc(sizeof(struct node));
    ll->tail = (struct node*) malloc(sizeof(struct node));
    ll->head->val = 741;
    ll->tail->val = 741;
    ll->head->next = ll->tail;
    ll->tail->prev = ll->head;
    ll->length = 0;
    ll->capacity = capacity;

    return ll;
}

struct node *find(struct LL *ll, int val) {
    struct node *curr = ll->head->next;

    while (curr != NULL) {
        if (curr->val == val) {
            return curr;
        }

        curr = curr->next;
    }

    return NULL;
}

void print(struct LL *ll) {
    struct node *curr = ll->head->next;

    while (curr != NULL) {
        printf("%d -> ", curr->val);
        curr = curr->next;
    }
    printf("\n");
}

void insert(struct LL *ll, int val) {
   struct node *n = (struct node*) malloc(sizeof(struct node));
   n->val = val;
   ll->head->next->prev = n;
   n->next = ll->head->next;
   n->prev = ll->head;
   ll->head->next = n;
   ll->length++;
}

void moveToFront(struct LL *ll, struct node *n) {
    struct node *temp = n->prev;
    n->prev->next = n->next;
    n->next->prev = temp;
    ll->head->next->prev = n;
    n->next = ll->head->next;
    n->prev = ll->head;
    ll->head->next = n;
}

void removeNode(struct LL *ll, struct node *n) {
    struct node *temp = n->prev;
    n->prev->next = n->next;
    n->next->prev = temp;
    ll->length--;
    free(n);
}

void popLast(struct LL *ll) {
    struct node *last = ll->tail->prev;
    removeNode(ll, last);
}

int main() {
    freopen("input_problem_4.txt", "r", stdin);
    int num_cases, num_accesses;
    scanf("%d", &num_cases);

    // printf("%d, %d\n", num_cases, num_accesses);

    for (int i = 1; i <= num_cases; i++) {
        printf("Test Case: %d\n", i);
        scanf("%d", &num_accesses);
        int one_way_cache[8] = {-1,-1,-1,-1,-1,-1,-1,-1};
        struct LL *two_way_cache[4] = {newLL(2), newLL(2), newLL(2), newLL(2)};
        struct LL *four_way_cache[2] = {newLL(4), newLL(4)};
        struct LL *eight_way_cache[1] = {newLL(8)};
        int hits = 0, misses = 0;
        int two_hits = 0, two_misses = 0;
        int four_hits = 0, four_misses = 0;
        int eight_hits = 0, eight_misses = 0;
        int memory;
        for (int i = 0; i < num_accesses; i++) {
            scanf(" %d", &memory);

            // ONE WAY
            int index = memory % 8;
            if (one_way_cache[index] == memory) {
                hits++;
            } else {
                one_way_cache[index] = memory;
                misses++;
            }

            // TWO WAY
            int two_index = memory % 4;
            struct node *two_found = find(two_way_cache[two_index], memory);
            if (two_found == NULL) {
                two_misses++;
                if (two_way_cache[two_index]->capacity == two_way_cache[two_index]->length) {
                    popLast(two_way_cache[two_index]);
                } 
                insert(two_way_cache[two_index], memory);
            } else {
                two_hits++;
                moveToFront(two_way_cache[two_index], two_found);
            }

            // FOUR WAY
            int four_index = memory % 2;
            struct node *four_found = find(four_way_cache[four_index], memory);
            if (four_found == NULL) {
                four_misses++;
                if (four_way_cache[four_index]->capacity == four_way_cache[four_index]->length) {
                    popLast(four_way_cache[four_index]);
                } 
                insert(four_way_cache[four_index], memory);
            } else {
                four_hits++;
                moveToFront(four_way_cache[four_index], four_found);
            }

            // EIGHT WAY
            int eight_index = memory % 1;
            struct node *eight_found = find(eight_way_cache[eight_index], memory);
            if (eight_found == NULL) {
                eight_misses++;
                if (eight_way_cache[eight_index]->capacity == eight_way_cache[eight_index]->length) {
                    popLast(eight_way_cache[eight_index]);
                } 
                insert(eight_way_cache[eight_index], memory);
            } else {
                eight_hits++;
                moveToFront(eight_way_cache[eight_index], eight_found);
            }

        }
        printf("1-way: %d, %d \n", hits, misses);
        printf("2-way: %d, %d \n", two_hits, two_misses);
        printf("4-way: %d, %d \n", four_hits, four_misses);
        printf("8-way: %d, %d \n", eight_hits, eight_misses);



    }


    return 0;
}